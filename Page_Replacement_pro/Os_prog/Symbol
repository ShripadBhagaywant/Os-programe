#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define M20
struct ST
{
	char Symb[10];
	int Addr,def,Used,Val,Len;
}S[M];
char OPTAB[][10]={"STOP","ADD","SUB","MULT","DIV","MOVER","MOVEM","COMP","BC","PRINT","READ"};
char ADTAB[][10]={"START","END","ORIGN","EQUL","LTORG"};
int SymbCnt,TokCnt,Pc,i,j,k,m;
char Tok1[M],Tok2[M],Tok3[M],Tok[4],Buffer[80];
FILE * FP;
int SerachSymb(char*S)
for(m=0;m<Symbcnt;m++)
if(strcamp(s[m].Symb,S)==0)
return(m);
return(-1);
int Searchop(char*s)
{
	for(m=0;m<11;m++)
	if(strcmp(OPTAB[M],S)==0)
	return(m);
	return(-1);
}
int SerchDirective(Char*S)
{
	for(m=0;m<5;m++)
	if(strcamp(ADTAB[M],S)==0)
	return(m);
	return(-1);
}
void DispSymbTab()
{
	printf("Symbol\tAdders\tDelcred\tUsed\tValue\tLength\n");
	for(m=0;m<SymbCant;m++)
	{
		printf("%s\t%d\t\t%d\t%d\t%d\t%d",S[M],Addr,S[M]def,S[M]Used,S[M]Val,S[M]Len);
	}
for(m=0;m<Symbcnt;m++)
{
	if(S[m].Used==1&& S[m].def==0)
	printf("\nSymbol%sUsed but not defined",S[m].Symb);
	else if(S[m].Used==0 && S[m].def==1)
	printf("\nSymbol%sUsed but not defined",S[m].Symb);
	
}
}
void Passone()
{
	FP = fopen("symbol.txt","r");
	if(fp== NULL)
	{
		printf("File opening error%s");
		return;
	
	}
}
while(fgets(Buffer,80,fp))
{
	TokCnt=sscanf(Buffer,"%s%s%s%s",Tok1,Tok2,Tok3,Tok4);
	switch(TockCnt)
	{
		case 2:
			i=SearchOp(Tok1);
			if(i==0||i==10)
			{
				j=SearchSymb(Tok2);
				if(j==1)
				{
					strcpy(S[SymbCnt].Symb,Tok2);
					S[SymbCnt++].Used=1;
				}
			}
			else
			{
				S[j].Used=1;
				break;
			}
			i=SearchDrivative(Tok1);
			if(i==0||i==2)
			{
				j=SearchOp(Tok2);
				if(i==0)
				{
					j=SearchSymb(Tok1);
					if(j==-1)
					{
						strcpy(S[SymbCnt].Symb,Tok1);
						S[SymbCnt].Addr=pc;
						S[SymbCnt].def=1;
						S[SymbCnt].Val=0;
						S[SymbCnt++].Len=0;
					}
					else
					{
						if(S[j].def==1)
						printf("\n readcleratio Symbol%s",Tok1);
	
					}
				}
				else
				{
					S[j].Addr=pc;
					S[j].def=1;
					S[j].Val=S[j].Len=0;
				}
				
			}
		break;
		case 3:
			i = SearchOp(Tok1)
			if(i>=1&&i<=8)
			{
				Tok2[Strlen(Tok2)-1='10'];
				j=SearchSymb(Tok3);
				if(J==-1)
				{
					strcpy(S[SymbCnt].Symb,Tok3);
					S[SymbCnt++].Used=1;
				}
				else if(strcmp(Tok2,"DC")==0)
				{
					j=SearchSymb(Tok1);
					if(j==-1)
					{
						strcpy(S[SymbCnt].Symb,Tok1);
						S[SymbCnt].Addr=pc;
						S[SymbCnt].def=1;
						S[SymbCnt].Val=atoi(Tok3);
						S[SymbCnt++].Len=1;
					}
					else
					{
						if(S[j].def==1)
						printf(" redelcartion of symbol%s\n",Tok1)
						else
						{
							S[j].Addr=pc;
							S[j].def=1;
							S[j].Val=atoi(Tok3);
							S[j].Len=1;	
						}
					}
				}
				else if(strcmp(Tok2,"DS")==0)
				{
					j=SearchSymb(Tok1);
					if(j==-1)
					{
						strcpy(S[SymbCnt].Symb,Tok1);
						S[SymbCnt].Addr=pc;
						S[SymbCnt].def=1;
						S[SymbCnt].Val=0;
						S[SymbCnt++].Len=atoi(Tok3);
					}
				}
				else
					{
						if(S[j].def==1)
						printf(" redelcartion of symbol%s\n",Tok1)
						else
						{
							S[j].Addr=pc;
							S[j].def=1;
							S[j].Val=0;
							S[j].Len=atoi(Tok3);	
						}
					}
				pc + = atio(Tok3)-1;
			}
			else
			{
				j=SearchSymb(Tok1);
				if(j==-1)
				{
					strcpy(S[SymbCnt].Symb,Tok1);
						S[SymbCnt].Addr=pc;
						S[SymbCnt].def=1;
						S[SymbCnt].Val=0;
						S[SymbCnt++].Len=0;
				}
				else
				{
					if(S[j].def==1)
						printf(" redelcartion of symbol%s\n",Tok1)
						else
						{
							S[j].Addr=pc;
							S[j].def=1;
							S[j].Val=S[j].Len=0;	
						}
				}
				i=SearchOp(Tok2)
				if(i==9||i==10)
				{
					j=Search
				}
			}		

	} 
		     

}
